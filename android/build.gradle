import java.nio.file.Paths

static def findNodeModules(baseDir) {
  def basePath = baseDir.toPath().normalize()
  // Node's module resolution algorithm searches up to the root directory,
  // after which the base path will be null
  while (basePath) {
    def nodeModulesPath = Paths.get(basePath.toString(), "node_modules")
    def reactNativePath = Paths.get(nodeModulesPath.toString(), "react-native")
    if (nodeModulesPath.toFile().exists() && reactNativePath.toFile().exists()) {
      return nodeModulesPath.toString()
    }
    basePath = basePath.getParent()
  }
  throw new GradleException("JSI-WS: Failed to find node_modules/ path!")
}

def nodeModules = findNodeModules(projectDir)
logger.warn("JSI-WS: node_modules/ found at: ${nodeModules}")

buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  repositories {
    google()
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:4.2.2'
  }
}

apply plugin: 'com.android.library'

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['RandomValuesJsiHelper_' + name]
}

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "arm64-v8a"]
}

 def FOR_HERMES = System.getenv("FOR_HERMES") == "True"
 rootProject.getSubprojects().forEach({ project ->
   if (project.plugins.hasPlugin("com.android.application")) {
     FOR_HERMES = project.ext.react.enableHermes
   }
 })

def reactProperties = new Properties()
file("$nodeModules/react-native/ReactAndroid/gradle.properties").withInputStream { reactProperties.load(it) }

android {
  buildFeatures {
    prefab true
  }
  compileSdkVersion safeExtGet('compileSdkVersion', 30)
  buildToolsVersion safeExtGet('buildToolsVersion', '30.0.0')
  ndkVersion getExtOrDefault('ndkVersion')

  buildFeatures {
    prefab true
  }

  defaultConfig {
    minSdkVersion 24
    targetSdkVersion safeExtGet('targetSdkVersion', 30)

    externalNativeBuild {
      cmake {
        cppFlags "-fexceptions", "-frtti", "-std=c++1y", "-DONANDROID", "-DANDROID"
        arguments '-DANDROID_STL=c++_shared',
                  "-DNODE_MODULES_DIR=${nodeModules}"
      }
    }
    ndk {
      abiFilters (*reactNativeArchitectures())
    }
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }

  packagingOptions {
    // Exclude all Libraries that are already present in the user's app (through React Native or by him installing REA)
    excludes = [
            "**/libc++_shared.so",
            "**/libfbjni.so",
            "**/libreactnativejni.so",
            "**/libjsi.so",
            "**/libreact_nativemodule_core.so",
            "**/libturbomodulejsijni.so",
            "**/MANIFEST.MF",
            ""
    ]
    exclude "META-INF/**"
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable 'GradleCompatible'
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

repositories {
  mavenCentral()
  google()
}

dependencies {
  // noinspection GradleDynamicVersion
  implementation 'com.android.ndk.thirdparty:curl:7.79.1-beta-1'
  implementation 'com.android.ndk.thirdparty:openssl:1.1.1l-beta-1'

  implementation "com.facebook.react:react-android:"
  implementation "com.facebook.react:hermes-android:"
}
